# -*- coding: utf-8 -*-
"""Activity-2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qoP6_gnafCntd7_DVQse1ma3I0ko6Y2B
"""

import heapq
import networkx as nx
import matplotlib.pyplot as plt

class GrafoTransporte:
    def __init__(self):
        self.grafo = {}
        self.grafo_nx = nx.Graph()  # Usaremos este grafo para graficar con networkx

    def agregar_ruta(self, origen, destino, peso):
        if origen not in self.grafo:
            self.grafo[origen] = []
        if destino not in self.grafo:
            self.grafo[destino] = []
        # Agregamos las rutas bidireccionales (ida y vuelta)
        self.grafo[origen].append((peso, destino))
        self.grafo[destino].append((peso, origen))

        # También añadimos la ruta al grafo de networkx para graficar
        self.grafo_nx.add_edge(origen, destino, weight=peso)

    def encontrar_mejor_ruta(self, inicio, destino):
        # Usamos una cola de prioridad para encontrar la ruta más corta
        cola = [(0, inicio)]  # (distancia acumulada, nodo)
        distancias = {nodo: float('infinity') for nodo in self.grafo}
        distancias[inicio] = 0
        caminos = {nodo: None for nodo in self.grafo}

        while cola:
            distancia_actual, nodo_actual = heapq.heappop(cola)

            if nodo_actual == destino:
                break

            for peso, vecino in self.grafo[nodo_actual]:
                distancia = distancia_actual + peso
                if distancia < distancias[vecino]:
                    distancias[vecino] = distancia
                    caminos[vecino] = nodo_actual
                    heapq.heappush(cola, (distancia, vecino))

        ruta = []
        nodo = destino
        while nodo is not None:
            ruta.append(nodo)
            nodo = caminos[nodo]
        ruta.reverse()

        return ruta, distancias[destino]

    def mostrar_grafo(self):
        # Obtenemos las posiciones de los nodos para visualización
        pos = nx.spring_layout(self.grafo_nx)

        # Dibujamos los nodos y los bordes
        nx.draw(self.grafo_nx, pos, with_labels=True, node_size=700, node_color="lightblue", font_size=10, font_weight="bold")

        # Añadimos las etiquetas de los pesos de los bordes
        labels = nx.get_edge_attributes(self.grafo_nx, 'weight')
        nx.draw_networkx_edge_labels(self.grafo_nx, pos, edge_labels=labels)

        # Mostramos el grafo
        plt.title("Sistema de Transporte")
        plt.show()

# Definir las rutas del sistema de transporte
sistema_transporte = GrafoTransporte()
sistema_transporte.agregar_ruta("A", "B", 5)
sistema_transporte.agregar_ruta("B", "C", 3)
sistema_transporte.agregar_ruta("A", "D", 10)
sistema_transporte.agregar_ruta("C", "D", 1)
sistema_transporte.agregar_ruta("B", "E", 7)
sistema_transporte.agregar_ruta("D", "E", 2)

"""# 1. Encontrar la mejor ruta entre A y E


"""

ruta, costo_total = sistema_transporte.encontrar_mejor_ruta("A", "E")
print(f"Mejor ruta: {ruta}, Costo total: {costo_total}")

# Mostrar el grafo de rutas del sistema de transporte
sistema_transporte.mostrar_grafo()

"""# 2. Encontrar la mejor ruta entre C y D

"""

ruta, costo_total = sistema_transporte.encontrar_mejor_ruta("A", "E")
print(f"Mejor ruta: {ruta}, Costo total: {costo_total}")

# Mostrar el grafo de rutas del sistema de transporte
sistema_transporte.mostrar_grafo()